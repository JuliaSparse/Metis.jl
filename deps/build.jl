using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libmetis"], :libmetis),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/fredrikekre/METISBuilder/releases/download/v5.1.0-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.aarch64-linux-gnu.tar.gz", "9c6b3883556d5fc1b71304387478c918dbd3530289d1089897f85727498b74ff"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/METIS.v5.1.0.aarch64-linux-musl.tar.gz", "d44b1e3e98bf4b545171654b95912c6b95594d85a23fcc27ca545146686c197c"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/METIS.v5.1.0.arm-linux-gnueabihf.tar.gz", "c8857d9955c8e750895c6b0f6b61f592574ead12fc056c7d001798bec4510f5a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/METIS.v5.1.0.arm-linux-musleabihf.tar.gz", "4ca05e063057348312501184196326de8739c749dfcd092344ff8737c2c0f6f4"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.i686-linux-gnu.tar.gz", "1e6d0acccb3b0628d0c43b4eed1aa0cb1b8ac55fc778c3e135ae4c7f837f8c58"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/METIS.v5.1.0.i686-linux-musl.tar.gz", "ec9e52542d2c572af02919e038c1b35f431601790033542e1f91e756b668ca2c"),
    Windows(:i686) => ("$bin_prefix/METIS.v5.1.0.i686-w64-mingw32.tar.gz", "8a49e47db1c333c1b3410b9e3b7e8ea46d0918fe3fc7cce40093557f662bef23"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.powerpc64le-linux-gnu.tar.gz", "c0eff62fc3f0422fba2c8e2a00a6bcf8662a544ef35db4969b2daab846be70af"),
    MacOS(:x86_64) => ("$bin_prefix/METIS.v5.1.0.x86_64-apple-darwin14.tar.gz", "25e174ebb6dde24c8356d13a4087b9bf87933d22aa6277c90421234851879f11"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.x86_64-linux-gnu.tar.gz", "8d04ca484c254d4ad860f542e5fc656d2cb4956a9f652d6ab12fc94cdac01e42"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/METIS.v5.1.0.x86_64-linux-musl.tar.gz", "1bc69e208f886e77babf415922ecde6488cf01eb2ca19720dac7d7a0781c2fd6"),
    FreeBSD(:x86_64) => ("$bin_prefix/METIS.v5.1.0.x86_64-unknown-freebsd11.1.tar.gz", "fe547eaeab0df59b554d938b38093ac0d27eb21f935b966a21d292ebd7a4864d"),
    Windows(:x86_64) => ("$bin_prefix/METIS.v5.1.0.x86_64-w64-mingw32.tar.gz", "e13c2152979f5b30493015ce5d8ddc045bd42baf8fe5fe3e8f3fa84961602805"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
