using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libmetis"], :libmetis),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/fredrikekre/METISBuilder/releases/download/v5.1.0-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/metis.aarch64-linux-gnu.tar.gz", "c04eeaabce1a641c19a92b6864585dec905e7867b013ebc090aed61495abd09e"),
    BinaryProvider.UnknownPlatform() => ("$bin_prefix/metis.arm-linux-gnueabihf.tar.gz", "25ec1f2c415474beb8408d33d8b81a1ba031f7a384556d841754ef4f88eb2b78"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/metis.i686-linux-gnu.tar.gz", "cdf4d75eb5c5cf080e4e6f54c241c01ff54a4dd661be2f54525ebce5be267ac7"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/metis.powerpc64le-linux-gnu.tar.gz", "834005c8fe2516ae3d8b5d19023ac8ae69be91b0a578258406ddaec1d35e5252"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/metis.x86_64-apple-darwin14.tar.gz", "4a21bc339b91dec80424dd043462d0a98b00d5ae21767f13651d64c367332d0e"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/metis.x86_64-linux-gnu.tar.gz", "05eeb1aedb861e0145e6f05676f42ddade6bf4d9dcadd2edd367802111667939"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
