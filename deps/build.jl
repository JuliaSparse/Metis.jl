using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libmetis"], :libmetis),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/METIS-v5.1.0-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.aarch64-linux-gnu.tar.gz", "98a5916b74cf1acbcdadcef8c0c9ebd4aa0dc226d586e907945e3f276d5ae862"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/METIS.v5.1.0.aarch64-linux-musl.tar.gz", "0d52f9c21158364e256a928fd9ea3b9ba0ccc08aaa915993582a9e11dc4f39dd"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/METIS.v5.1.0.arm-linux-gnueabihf.tar.gz", "6af0857530fe7e6de337af5a721fa85ee103a7455199f3a167b245ab64d5c0f7"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/METIS.v5.1.0.arm-linux-musleabihf.tar.gz", "e994fda25dbcea5b141b2e33f33c493c6be90043864e4a17592a62f025c9d8bc"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.i686-linux-gnu.tar.gz", "4541d116c7d9c5c05e02500b0832d50e40f0bb5f0f53313bd490c1d9d05b1b85"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/METIS.v5.1.0.i686-linux-musl.tar.gz", "cc86e629fbb4a83ccecdbaed31527e84cba98d78df5a5037dc409d1956c29bc8"),
    Windows(:i686) => ("$bin_prefix/METIS.v5.1.0.i686-w64-mingw32.tar.gz", "bc98b4941a18e98b289c276c163a19b33c54b6a0885192cd1f3b80a76a9c5c80"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.powerpc64le-linux-gnu.tar.gz", "5d32ecda1a0548dc99c9b947b2fdfa91d102fc908b4e6baad6e07c8cdc38f4d4"),
    MacOS(:x86_64) => ("$bin_prefix/METIS.v5.1.0.x86_64-apple-darwin14.tar.gz", "3323b85eb5b89ea5b73577f7269efcc6d377a5fed6383f7245ae239c55f50cb4"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/METIS.v5.1.0.x86_64-linux-gnu.tar.gz", "5e8a7c04cee5e63e0c16edc62835bb67a99289f1218eb10d26df8d8655d05d52"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/METIS.v5.1.0.x86_64-linux-musl.tar.gz", "984b733dc727f04fa8ef0c752d24f3bdcb0c851c1cd8e4abe3b093c989e95963"),
    FreeBSD(:x86_64) => ("$bin_prefix/METIS.v5.1.0.x86_64-unknown-freebsd11.1.tar.gz", "3c8959dd3f26807556b6ce2fcae2380bda432eceb237ea7a46e838fd40e3a019"),
    Windows(:x86_64) => ("$bin_prefix/METIS.v5.1.0.x86_64-w64-mingw32.tar.gz", "0aea690016ddf3012714e99ce9a15d317c3c5981d5585d43d115fcfb1c80c050"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
